MovieApp - Screenshots

## Screenshots
### Home Screen
![Home Screen](AppScreenshots/Homescreen.png) <img src="AppScreenshots/Homescreen.png" width="300">

MovieApp is an iOS application built in Swift that allows users to browse trending and now-playing movies, search for movies in real-time, bookmark their favorites, and share movie details via deep-linking. The app is designed to work offline by persisting data in Core Data and caching images in the file system.
üèó Architecture
	‚Ä¢	MVVM (Model-View-ViewModel) architecture is used for clean separation of concerns.
	‚Ä¢	Core Data is used to store movie details for offline support.
	‚Ä¢	File system is used for storing movie poster images.
	‚Ä¢	Caching is implemented with a Time-to-Live (TTL) of 1 day for faster image loading. If a cached image is not found, it falls back to the file system.
	‚Ä¢	DispatchWorkItem is used for debouncing API calls in the search feature.
	‚Ä¢	Cache expiry ensures images are refreshed periodically.

üì± Features
1. Home Tab
	‚Ä¢	Contains a parent scroll view with two collection views:
	‚ó¶	Top horizontal collection view: Trending movies
	‚ó¶	Bottom vertical collection view: Now playing movies
    ‚ó¶	Both horizontal and vertical collection views are paginated ,i.e. infinite scrolling:)
	‚Ä¢	Users can tap a movie to see its details in MovieDetailsViewController.
	‚Ä¢	Movie details allow users to:
	‚ó¶	Bookmark a movie
	‚ó¶	Read the overview
	‚ó¶	Share the movie using deep-linking
	‚Ä¢	Offline support: Movie data is persisted in Core Data and poster images are cached.
2. Search Tab
	‚Ä¢	Real-time movie search as the user types.
	‚Ä¢	Debouncing API calls using DispatchWorkItem to prevent unnecessary network requests.
	‚Ä¢	Users can tap a searched movie to view details.
	‚Ä¢	Pull-to-refresh is supported (API called with page=1).
3. Saved Tab
	‚Ä¢	Displays all bookmarked movies in SavedMoviesViewController.
	‚Ä¢	Users can un-save movies directly from this list.
	‚Ä¢	The list refreshes automatically when changes occur.
	‚Ä¢	Pull-to-refresh supported.

üîß How Data Works
	‚Ä¢	Movies & Details: Stored in Core Data for offline access.
	‚Ä¢	Poster Images: Stored in the File System.
	‚Ä¢	Image Caching:
	‚ó¶	Cached images are loaded first.
	‚ó¶	If cache is expired or missing, images are fetched from the file system.
	‚ó¶	Cache TTL = 1 day.
üõ† Technical Details
	‚Ä¢	Language: Swift
	‚Ä¢	Architecture: MVVM
	‚Ä¢	Offline Support: Core Data + File system + Caching
	‚Ä¢	Debounced API Calls: Using DispatchWorkItem
	‚Ä¢	Cache Expiry: 1 day TTL for images
	‚Ä¢	Deep-linking: Movie details can be opened via URL
üìÇ File Structure
	‚Ä¢	HomeViewController.swift ‚Äì Home screen with trending & now-playing movies
	‚Ä¢	MovieDetailsViewController.swift ‚Äì Movie detail view, bookmark & share functionality
	‚Ä¢	SavedMoviesViewController.swift ‚Äì List of saved movies with remove option
	‚Ä¢	SearchViewController.swift ‚Äì Real-time search with debounced API calls
	‚Ä¢	Models/ ‚Äì Core Data and API models
	‚Ä¢	ViewModels/ ‚Äì MVVM view models for each screen
	‚Ä¢	Services/ ‚Äì API, caching, and persistence services
	‚Ä¢	Views/ ‚Äì Custom UI components and reusable views
